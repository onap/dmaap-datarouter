/*******************************************************************************
 * ============LICENSE_START==================================================
 * * org.onap.dmaap
 * * ===========================================================================
 * * Copyright Â© 2017 AT&T Intellectual Property. All rights reserved.
 * * ===========================================================================
 * * Licensed under the Apache License, Version 2.0 (the "License");
 * * you may not use this file except in compliance with the License.
 * * You may obtain a copy of the License at
 * *
 *  *      http://www.apache.org/licenses/LICENSE-2.0
 * *
 *  * Unless required by applicable law or agreed to in writing, software
 * * distributed under the License is distributed on an "AS IS" BASIS,
 * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * * See the License for the specific language governing permissions and
 * * limitations under the License.
 * * ============LICENSE_END====================================================
 * *
 * * ECOMP is a trademark and service mark of AT&T Intellectual Property.
 * *
 ******************************************************************************/


package org.onap.dmaap.datarouter.provisioning;

import static org.onap.dmaap.datarouter.provisioning.utils.HttpServletUtils.sendResponseError;

import java.io.IOException;
import java.io.InvalidObjectException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.json.JSONObject;

import org.onap.dmaap.datarouter.provisioning.beans.EventLogRecord;
import org.onap.dmaap.datarouter.provisioning.beans.Group;



/**
 * This servlet handles provisioning for the &lt;groups&gt; which is generated by the provisioning
 * server to handle the creation and inspection of groups for FEEDS and SUBSCRIPTIONS.
 *
 * @author Vikram Singh
 * @version $Id$
 * @version $Id: Group.java,v 1.0 2016/07/19
 */
@SuppressWarnings("serial")
public class GroupServlet extends ProxyServlet {

    public static final String MISSING_HEADER_MESSAGE = "Missing " + BEHALF_HEADER + " header.";

    /**
     * DELETE on the &lt;GRUPS&gt; -- not supported.
     */
    @Override
    public void doDelete(HttpServletRequest req, HttpServletResponse resp) {
        String message = "DELETE not allowed for the GROUPS.";
        EventLogRecord elr = new EventLogRecord(req);
        elr.setMessage(message);
        elr.setResult(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
        eventlogger.error(elr.toString());
        sendResponseError(resp, HttpServletResponse.SC_METHOD_NOT_ALLOWED, message, eventlogger);
    }

    /**
     * GET on the the list of groups to a feed/sub.
     * See the <i>Groups Collection Query</i> section in the <b>Provisioning API</b>
     * document for details on how this method should be invoked.
     */
    @Override
    public void doGet(HttpServletRequest req, HttpServletResponse resp) {
        EventLogRecord elr = new EventLogRecord(req);
        String message = isAuthorizedForProvisioning(req);
        if (message != null) {
            elr.setMessage(message);
            elr.setResult(HttpServletResponse.SC_FORBIDDEN);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_FORBIDDEN, message, eventlogger);
            return;
        }
        if (isProxyServer()) {
            super.doGet(req, resp);
            return;
        }
        String bhdr = req.getHeader(BEHALF_HEADER);
        if (bhdr == null) {
            elr.setMessage(MISSING_HEADER_MESSAGE);
            elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST, MISSING_HEADER_MESSAGE, eventlogger);
            return;
        }

        int groupid = getIdFromPath(req);
        if (groupid < 0) {
            message = "Missing or bad group number.";
            elr.setMessage(message);
            elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST, message, eventlogger);
            return;
        }

        Group gup = Group.getGroupById(groupid);
        // send response
        elr.setResult(HttpServletResponse.SC_OK);
        eventlogger.info(elr.toString());
        resp.setStatus(HttpServletResponse.SC_OK);
        resp.setContentType(GROUPFULL_CONTENT_TYPE);
        try {
            resp.getOutputStream().print(gup.asJSONObject().toString());
        } catch (IOException ioe) {
            eventlogger.error("PROV0121 GroupServlet.doGet: " + ioe.getMessage(), ioe);
        }

    }

    /**
     * PUT on the &lt;GROUPS&gt; -- not supported.
     */
    @Override
    public void doPut(HttpServletRequest req, HttpServletResponse resp) {
        EventLogRecord elr = new EventLogRecord(req);
        String message = isAuthorizedForProvisioning(req);
        if (message != null) {
            elr.setMessage(message);
            elr.setResult(HttpServletResponse.SC_FORBIDDEN);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_FORBIDDEN, message, eventlogger);
            return;
        }
        if (isProxyServer()) {
            super.doPut(req, resp);
            return;
        }
        String bhdr = req.getHeader(BEHALF_HEADER);
        if (bhdr == null) {
            elr.setMessage(MISSING_HEADER_MESSAGE);
            elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST, MISSING_HEADER_MESSAGE, eventlogger);
            return;
        }
        int groupid = getIdFromPath(req);
        if (groupid < 0) {
            message = "Missing or bad groupid.";
            elr.setMessage(message);
            elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST, message, eventlogger);
            return;
        }
        Group oldgup = Group.getGroupById(groupid);
        if (oldgup == null) {
            message = "Missing or bad group number.";
            elr.setMessage(message);
            elr.setResult(HttpServletResponse.SC_NOT_FOUND);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_NOT_FOUND, message, eventlogger);
            return;
        }

        // check content type is SUB_CONTENT_TYPE, version 1.0
        ContentHeader ch = getContentHeader(req);
        String ver = ch.getAttribute("version");
        if (!ch.getType().equals(GROUP_BASECONTENT_TYPE) || !("1.0".equals(ver) || "2.0".equals(ver))) {
            message = "Incorrect content-type";
            elr.setMessage(message);
            elr.setResult(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE, message, eventlogger);
            return;
        }
        JSONObject jo = getJSONfromInput(req);
        if (jo == null) {
            message = BAD_JSON;
            elr.setMessage(message);
            elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST, message, eventlogger);
            return;
        }
        Group gup;
        try {
            gup = new Group(jo);
        } catch (InvalidObjectException e) {
            message = e.getMessage();
            elr.setMessage(message);
            elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
            eventlogger.error(elr.toString(), e);
            sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST, message, eventlogger);
            return;
        }
        gup.setGroupid(oldgup.getGroupid());
        Group gb2 = Group.getGroupMatching(gup, oldgup.getGroupid());
        if (gb2 != null) {
            eventlogger.warn("PROV0011 Creating a duplicate Group: " + gup.getName());
            elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
            sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST,"Duplicate Group:" + gup.getName(), eventlogger);
            return;
        }

        // Update Groups table entries
        if (doUpdate(gup)) {
            // send response
            elr.setResult(HttpServletResponse.SC_OK);
            eventlogger.info(elr.toString());
            resp.setStatus(HttpServletResponse.SC_OK);
            resp.setContentType(GROUPFULL_CONTENT_TYPE);
            try {
                resp.getOutputStream().print(gup.asJSONObject().toString());
            } catch (IOException ioe) {
                eventlogger.error("PROV0122 GroupServlet.doPut: " + ioe.getMessage(), ioe);
            }
            provisioningDataChanged();
        } else {
            // Something went wrong with the UPDATE
            elr.setResult(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_INTERNAL_SERVER_ERROR, DB_PROBLEM_MSG, eventlogger);
        }
    }

    /**
     * POST on the &lt;groups&gt; -- create a new GROUPS to a feed.
     * See the <i>Creating a GROUPS</i> section in the <b>Provisioning API</b>
     * document for details on how this method should be invoked.
     */
    @Override
    public void doPost(HttpServletRequest req, HttpServletResponse resp) {
        EventLogRecord elr = new EventLogRecord(req);
        String message = isAuthorizedForProvisioning(req);
        if (message != null) {
            elr.setMessage(message);
            elr.setResult(HttpServletResponse.SC_FORBIDDEN);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_FORBIDDEN, message, eventlogger);
            return;
        }
        if (isProxyServer()) {
            super.doPost(req, resp);
            return;
        }
        String bhdr = req.getHeader(BEHALF_HEADER);
        if (bhdr == null) {
            elr.setMessage(MISSING_HEADER_MESSAGE);
            elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST, MISSING_HEADER_MESSAGE, eventlogger);
            return;
        }

        // check content type is SUB_CONTENT_TYPE, version 1.0
        ContentHeader ch = getContentHeader(req);
        String ver = ch.getAttribute("version");
        if (!ch.getType().equals(GROUP_BASECONTENT_TYPE) || !("1.0".equals(ver) || "2.0".equals(ver))) {
            intlogger.debug("Content-type is: " + req.getHeader("Content-Type"));
            message = "Incorrect content-type";
            elr.setMessage(message);
            elr.setResult(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE, message, eventlogger);
            return;
        }
        JSONObject jo = getJSONfromInput(req);
        if (jo == null) {
            message = BAD_JSON;
            elr.setMessage(message);
            elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST, message, eventlogger);
            return;
        }
        Group gup;
        try {
            gup = new Group(jo);
        } catch (InvalidObjectException e) {
            message = e.getMessage();
            elr.setMessage(message);
            elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
            eventlogger.error(elr.toString(), e);
            sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST, message, eventlogger);
            return;
        }

        // Check if this group already exists; not an error (yet), just warn
        Group gb2 = Group.getGroupMatching(gup);
        if (gb2 != null) {
            eventlogger.warn("PROV0011 Creating a duplicate Group: " + gup.getName());
            elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
            sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST,"Duplicate Group:" + gup.getName(), eventlogger);
            return;
        }

        // Create GROUPS table entries
        if (doInsert(gup)) {
            // send response
            elr.setResult(HttpServletResponse.SC_CREATED);
            eventlogger.info(elr.toString());
            resp.setStatus(HttpServletResponse.SC_CREATED);
            resp.setContentType(GROUPFULL_CONTENT_TYPE);
            try {
                resp.getOutputStream().print(gup.asJSONObject().toString());
            } catch (IOException ioe) {
                eventlogger.error("PROV0122 GroupServlet.doPost: " + ioe.getMessage(), ioe);
            }
            provisioningDataChanged();
        } else {
            // Something went wrong with the INSERT
            elr.setResult(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_INTERNAL_SERVER_ERROR, DB_PROBLEM_MSG, eventlogger);
        }
    }
}
