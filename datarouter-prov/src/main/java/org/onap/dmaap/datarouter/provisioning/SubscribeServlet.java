/*******************************************************************************
 * ============LICENSE_START==================================================
 * * org.onap.dmaap
 * * ===========================================================================
 * * Copyright Â© 2017 AT&T Intellectual Property. All rights reserved.
 * * ===========================================================================
 * * Licensed under the Apache License, Version 2.0 (the "License");
 * * you may not use this file except in compliance with the License.
 * * You may obtain a copy of the License at
 * *
 *  *      http://www.apache.org/licenses/LICENSE-2.0
 * *
 *  * Unless required by applicable law or agreed to in writing, software
 * * distributed under the License is distributed on an "AS IS" BASIS,
 * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * * See the License for the specific language governing permissions and
 * * limitations under the License.
 * * ============LICENSE_END====================================================
 * *
 * * ECOMP is a trademark and service mark of AT&T Intellectual Property.
 * *
 ******************************************************************************/


package org.onap.dmaap.datarouter.provisioning;

import static org.onap.dmaap.datarouter.provisioning.utils.HttpServletUtils.sendResponseError;

import com.att.eelf.configuration.EELFLogger;
import com.att.eelf.configuration.EELFManager;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.json.JSONObject;
import org.onap.dmaap.datarouter.authz.AuthorizationResponse;
import org.onap.dmaap.datarouter.provisioning.beans.EventLogRecord;
import org.onap.dmaap.datarouter.provisioning.beans.Feed;
import org.onap.dmaap.datarouter.provisioning.beans.Subscription;
import org.onap.dmaap.datarouter.provisioning.eelf.EelfMsgs;
import org.onap.dmaap.datarouter.provisioning.utils.JSONUtilities;


/**
 * This servlet handles provisioning for the &lt;subscribeURL&gt; which is generated by the provisioning server to
 * handle the creation and inspection of subscriptions to a specific feed.
 *
 * @author Robert Eby
 * @version $Id$
 */
@SuppressWarnings("serial")

public class SubscribeServlet extends ProxyServlet {

    //Adding EELF Logger Rally:US664892
    private static EELFLogger eelfLogger = EELFManager.getInstance()
        .getLogger(SubscribeServlet.class);

    /**
     * DELETE on the &lt;subscribeUrl&gt; -- not supported.
     */
    @Override
    public void doDelete(HttpServletRequest req, HttpServletResponse resp) {
        setIpFqdnRequestIDandInvocationIDForEelf("doDelete", req);
        eelfLogger.info(EelfMsgs.ENTRY);
        try {
            eelfLogger.info(EelfMsgs.MESSAGE_WITH_BEHALF_AND_SUBID,
                    req.getHeader(BEHALF_HEADER), getIdFromPath(req) + "");
            String message = "DELETE not allowed for the subscribeURL.";
            EventLogRecord elr = new EventLogRecord(req);
            elr.setMessage(message);
            elr.setResult(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_METHOD_NOT_ALLOWED, message, eventlogger);
        } finally {
            eelfLogger.info(EelfMsgs.EXIT);
        }
    }

    /**
     * GET on the &lt;subscribeUrl&gt; -- get the list of subscriptions to a feed. See the <i>Subscription Collection
     * Query</i> section in the <b>Provisioning API</b> document for details on how this method should be invoked.
     */
    @Override
    public void doGet(HttpServletRequest req, HttpServletResponse resp) {
        setIpFqdnRequestIDandInvocationIDForEelf("doGet", req);
        eelfLogger.info(EelfMsgs.ENTRY);
        try {
            eelfLogger.info(EelfMsgs.MESSAGE_WITH_BEHALF_AND_SUBID,
                    req.getHeader(BEHALF_HEADER), getIdFromPath(req) + "");
            EventLogRecord elr = new EventLogRecord(req);
            String message = isAuthorizedForProvisioning(req);
            if (message != null) {
                elr.setMessage(message);
                elr.setResult(HttpServletResponse.SC_FORBIDDEN);
                eventlogger.error(elr.toString());
                sendResponseError(resp, HttpServletResponse.SC_FORBIDDEN, message, eventlogger);
                return;
            }
            if (isProxyServer()) {
                super.doGet(req, resp);
                return;
            }
            String bhdr = req.getHeader(BEHALF_HEADER);
            if (bhdr == null) {
                message = "Missing " + BEHALF_HEADER + " header.";
                elr.setMessage(message);
                elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
                eventlogger.error(elr.toString());
                sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST, message, eventlogger);
                return;
            }
            int feedid = getIdFromPath(req);
            if (feedid < 0) {
                message = MISSING_FEED;
                elr.setMessage(message);
                elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
                eventlogger.error(elr.toString());
                sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST, message, eventlogger);
                return;
            }
            Feed feed = Feed.getFeedById(feedid);
            if (feed == null || feed.isDeleted()) {
                message = MISSING_FEED;
                elr.setMessage(message);
                elr.setResult(HttpServletResponse.SC_NOT_FOUND);
                eventlogger.error(elr.toString());
                sendResponseError(resp, HttpServletResponse.SC_NOT_FOUND, message, eventlogger);
                return;
            }
            // Display a list of URLs
            Collection<String> list = Subscription.getSubscriptionUrlList(feedid);
            String strList = JSONUtilities.createJSONArray(list);

            // send response
            elr.setResult(HttpServletResponse.SC_OK);
            eventlogger.info(elr.toString());
            resp.setStatus(HttpServletResponse.SC_OK);
            resp.setContentType(SUBLIST_CONTENT_TYPE);
            try {
                resp.getOutputStream().print(strList);
            } catch (IOException ioe) {
                eventlogger.error("PROV0181 SubscribeServlet.doGet: " + ioe.getMessage(), ioe);
            }
        } finally {
            eelfLogger.info(EelfMsgs.EXIT);
        }
    }

    /**
     * PUT on the &lt;subscribeUrl&gt; -- not supported.
     */
    @Override
    public void doPut(HttpServletRequest req, HttpServletResponse resp) {
        setIpFqdnRequestIDandInvocationIDForEelf("doPut", req);
        eelfLogger.info(EelfMsgs.ENTRY);
        try {
            eelfLogger.info(EelfMsgs.MESSAGE_WITH_BEHALF_AND_SUBID,
                    req.getHeader(BEHALF_HEADER), getIdFromPath(req) + "");
            String message = "PUT not allowed for the subscribeURL.";
            EventLogRecord elr = new EventLogRecord(req);
            elr.setMessage(message);
            elr.setResult(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
            eventlogger.error(elr.toString());
            sendResponseError(resp, HttpServletResponse.SC_METHOD_NOT_ALLOWED, message, eventlogger);
        } finally {
            eelfLogger.info(EelfMsgs.EXIT);
        }
    }

    /**
     * POST on the &lt;subscribeUrl&gt; -- create a new subscription to a feed. See the <i>Creating a Subscription</i>
     * section in the <b>Provisioning API</b> document for details on how this method should be invoked.
     */
    @Override
    public void doPost(HttpServletRequest req, HttpServletResponse resp) {
        setIpFqdnRequestIDandInvocationIDForEelf("doPost", req);
        eelfLogger.info(EelfMsgs.ENTRY);
        try {
            eelfLogger.info(EelfMsgs.MESSAGE_WITH_BEHALF, req.getHeader(BEHALF_HEADER));
            EventLogRecord elr = new EventLogRecord(req);
            String message = isAuthorizedForProvisioning(req);
            if (message != null) {
                elr.setMessage(message);
                elr.setResult(HttpServletResponse.SC_FORBIDDEN);
                eventlogger.error(elr.toString());
                sendResponseError(resp, HttpServletResponse.SC_FORBIDDEN, message, eventlogger);
                return;
            }
            if (isProxyServer()) {
                super.doPost(req, resp);
                return;
            }
            String bhdr = req.getHeader(BEHALF_HEADER);
            if (bhdr == null) {
                message = "Missing " + BEHALF_HEADER + " header.";
                elr.setMessage(message);
                elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
                eventlogger.error(elr.toString());
                sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST, message, eventlogger);
                return;
            }
            int feedid = getIdFromPath(req);
            if (feedid < 0) {
                message = MISSING_FEED;
                elr.setMessage(message);
                elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
                eventlogger.error(elr.toString());
                sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST, message, eventlogger);
                return;
            }
            Feed feed = Feed.getFeedById(feedid);
            if (feed == null || feed.isDeleted()) {
                message = MISSING_FEED;
                elr.setMessage(message);
                elr.setResult(HttpServletResponse.SC_NOT_FOUND);
                eventlogger.error(elr.toString());
                sendResponseError(resp, HttpServletResponse.SC_NOT_FOUND, message, eventlogger);
                return;
            }
            // check content type is SUB_CONTENT_TYPE, version 1.0
            ContentHeader ch = getContentHeader(req);
            String ver = ch.getAttribute("version");
            if (!ch.getType().equals(SUB_BASECONTENT_TYPE) || !("1.0".equals(ver) || "2.0".equals(ver))) {
                intlogger.debug("Content-type is: " + req.getHeader("Content-Type"));
                message = "Incorrect content-type";
                elr.setMessage(message);
                elr.setResult(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);
                eventlogger.error(elr.toString());
                sendResponseError(resp, HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE, message, eventlogger);
                return;
            }
            JSONObject jo = getJSONfromInput(req);
            if (jo == null) {
                message = BAD_JSON;
                elr.setMessage(message);
                elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
                eventlogger.error(elr.toString());
                sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST, message, eventlogger);
                return;
            }
            if (++activeSubs > maxSubs) {
                activeSubs--;
                message = "Cannot create subscription; the maximum number of subscriptions has been configured.";
                elr.setMessage(message);
                elr.setResult(HttpServletResponse.SC_CONFLICT);
                eventlogger.error(elr.toString());
                sendResponseError(resp, HttpServletResponse.SC_CONFLICT, message, eventlogger);
                return;
            }
            Subscription sub;
            try {
                sub = new Subscription(jo);
            } catch (InvalidObjectException e) {
                activeSubs--;
                message = e.getMessage();
                elr.setMessage(message);
                elr.setResult(HttpServletResponse.SC_BAD_REQUEST);
                eventlogger.error(elr.toString(), e);
                sendResponseError(resp, HttpServletResponse.SC_BAD_REQUEST, message, eventlogger);
                return;
            }
            sub.setFeedid(feedid);
            sub.setSubscriber(bhdr);    // set from X-DMAAP-DR-ON-BEHALF-OF header
            /*
             * START - AAF changes
             * TDP EPIC US# 307413
             * CADI code - check on permissions based on Legacy/AAF users to allow to create/add subscription
             */
            String feedAafInstance = feed.getAafInstance();
            String subAafInstance = sub.getAafInstance();
            boolean subAafLegacyEmptyOrNull = (subAafInstance == null
                                         || "".equals(subAafInstance) || "legacy".equalsIgnoreCase(subAafInstance));

            // This extra check added to verify AAF feed with AAF subscriber having empty aaf instance check
            if (feedAafInstance == null || "".equals(feedAafInstance) || "legacy".equalsIgnoreCase(feedAafInstance)) {
                if (subAafLegacyEmptyOrNull) {
                    AuthorizationResponse aresp = authz.decide(req);
                    if (!aresp.isAuthorized()) {
                        message = POLICY_ENGINE;
                        elr.setMessage(message);
                        elr.setResult(HttpServletResponse.SC_FORBIDDEN);
                        eventlogger.error(elr.toString());
                        sendResponseError(resp, HttpServletResponse.SC_FORBIDDEN, message, eventlogger);
                        return;
                    }
                } else {
                    //If Legacy Feed and AAF instance provided in Subscriber JSON
                    message = "AAF Subscriber can not be added to legacy Feed- " + feedid;
                    elr.setMessage(message);
                    elr.setResult(HttpServletResponse.SC_FORBIDDEN);
                    eventlogger.error(elr.toString());
                    sendResponseError(resp, HttpServletResponse.SC_FORBIDDEN, message, eventlogger);
                    return;
                }
            } else {
                //New AAF Requirement to add legacy subscriber to AAF Feed
                if (subAafLegacyEmptyOrNull) {
                    AuthorizationResponse aresp = authz.decide(req);
                    if (!aresp.isAuthorized()) {
                        message = POLICY_ENGINE;
                        elr.setMessage(message);
                        elr.setResult(HttpServletResponse.SC_FORBIDDEN);
                        eventlogger.error(elr.toString());
                        sendResponseError(resp, HttpServletResponse.SC_FORBIDDEN, message, eventlogger);
                        return;
                    }
                } else {
                    //New AAF Requirement to add subscriber by publisher on publisher approval only
                    String permission = getSubscriberPermission(subAafInstance, BaseServlet.APPROVE_SUB_PERMISSION);
                    eventlogger.info("SubscribeServlet.doPost().. Permission String - " + permission);
                    if (!req.isUserInRole(permission)) {
                        message = "AAF disallows access to permission - " + permission;
                        elr.setMessage(message);
                        elr.setResult(HttpServletResponse.SC_FORBIDDEN);
                        eventlogger.error(elr.toString());
                        sendResponseError(resp, HttpServletResponse.SC_FORBIDDEN, message, eventlogger);
                        return;
                    }
                }
            }
            /*
             * END - AAF changes
             */
            // Check if this subscription already exists; not an error (yet), just warn
            Subscription sub2 = Subscription.getSubscriptionMatching(sub);
            if (sub2 != null) {
                intlogger.warn(
                    "PROV0011 Creating a duplicate subscription: new subid="
                            + sub.getSubid() + ", old subid=" + sub2.getSubid());
            }

            // Create SUBSCRIPTIONS table entries
            if (doInsert(sub)) {
                // send response
                elr.setResult(HttpServletResponse.SC_CREATED);
                eventlogger.info(elr.toString());
                resp.setStatus(HttpServletResponse.SC_CREATED);
                resp.setContentType(SUBFULL_CONTENT_TYPE);
                resp.setHeader("Location", sub.getLinks().getSelf());
                try {
                    resp.getOutputStream().print(sub.asLimitedJSONObject().toString());
                } catch (IOException ioe) {
                    eventlogger.error("PROV0182 SubscribeServlet.doPost: " + ioe.getMessage(), ioe);
                }

                provisioningDataChanged();
            } else {
                // Something went wrong with the INSERT
                activeSubs--;
                elr.setResult(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                eventlogger.error(elr.toString());
                sendResponseError(resp, HttpServletResponse.SC_INTERNAL_SERVER_ERROR, DB_PROBLEM_MSG, eventlogger);
            }
        } finally {
            eelfLogger.info(EelfMsgs.EXIT);
        }
    }
}
